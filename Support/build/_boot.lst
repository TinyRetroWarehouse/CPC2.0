ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 ; boot.asm
                              2 ;
                              3 ; Boot up assembly
                              4 ; Part of the CPC2 project: http://intelligenttoasters.blog
                              5 ; Copyright (C)2017  Intelligent.Toasters@gmail.com
                              6 ;
                              7 ; This program is free software; you can redistribute it and/or modify
                              8 ; it under the terms of the GNU General Public License as published by
                              9 ; the Free Software Foundation; either version 3 of the License, or
                             10 ; (at your option) any later version.
                             11 ;
                             12 ; This program is distributed in the hope that it will be useful,
                             13 ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                             14 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             15 ; GNU General Public License for more details.
                             16 ;
                             17 ; You should have received a copy of the GNU General Public License
                             18 ; along with this program; if not, you can find a copy here:
                             19 ; https://www.gnu.org/licenses/gpl-3.0.en.html
                             20 ;
                             21 
                             22 	.module bootblk
                             23 
                             24 	.area _VECT0 (ABS)
   0000                      25 	.org	0x0000
                             26 
   0000 31 00 00      [10]   27 	ld sp,#0h0000	; Stack is top of memory
   0003 C3 00 00      [10]   28 	jp BOOTSYS
                             29 
                             30 	.area _VECT1 (ABS)
   0008                      31 	.org	0x0008
   0008 ED 4D         [14]   32 	reti
                             33 
                             34 	.area _VECT2 (ABS)
   0010                      35 	.org	0x0010
   0010 ED 4D         [14]   36 	reti
                             37 
                             38 	.area _VECT3 (ABS)
   0018                      39 	.org	0x0018
   0018 ED 4D         [14]   40 	reti
                             41 
                             42 	.area _VECT4 (ABS)
   0020                      43 	.org	0x0020
   0020 ED 4D         [14]   44 	reti
                             45 
                             46 	.area _VECT5 (ABS)
   0028                      47 	.org	0x0028
   0028 ED 4D         [14]   48 	reti
                             49 
                             50 	.area _VECT6 (ABS)
   0030                      51 	.org	0x0030
   0030 ED 4D         [14]   52 	reti
                             53 
                             54 	.area _VECT7 (ABS)
   0038                      55 	.org	0x0038
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



   0038 ED 73 4D 00   [20]   56 	ld (#INT_SP), sp
   003C 31 65 00      [10]   57 	ld sp, #INT_STACK
   003F D9            [ 4]   58 	exx					; Fast swap
   0040 08            [ 4]   59 	ex af,af'
   0041 CD 00 00      [17]   60 	call _int_handler
   0044 08            [ 4]   61 	ex af,af'
   0045 D9            [ 4]   62 	exx					; Fast swap
   0046 ED 7B 4D 00   [20]   63 	ld sp, (#INT_SP)
   004A FB            [ 4]   64 	ei
   004B ED 4D         [14]   65 	reti
                             66 
                             67 ; Local stack for INT, 2 bytes to record SP and 16 stack entries
   004D                      68 INT_SP:
   004D                      69 	.ds		2
   004F                      70 	.ds		22
   0065                      71 INT_STACK:	; Stack starts here and works down
                             72 
                             73 	.area _VECT_NMI (ABS)
   0066                      74 	.org	0x0066
   0066 ED 73 7A 00   [20]   75 	ld (#NMI_SP), sp
   006A 31 8C 00      [10]   76 	ld sp, #NMI_STACK
   006D D9            [ 4]   77 	exx					; Fast swap
   006E 08            [ 4]   78 	ex af,af'
   006F CD 00 00      [17]   79 	call _nmi_handler
   0072 08            [ 4]   80 	ex af,af'
   0073 D9            [ 4]   81 	exx					; Fast swap
   0074 ED 7B 7A 00   [20]   82 	ld sp, (#NMI_SP)
   0078 ED 45         [14]   83 	retn
                             84 
                             85 ; Local stack for NMI, 2 bytes to record SP and 16 stack entries
   007A                      86 NMI_SP:
   007A                      87 	.ds		2
   007C                      88 	.ds		16
   008C                      89 NMI_STACK:	; Stack starts here and works down
                             90 
                             91 ; Used to move the start of the code section if the ABS sections expand
                     008C    92 _CODE_START = .
                             93 
                             94 ;
                             95 ; ==================================================================
                             96 ;
                             97 ;; Ordering of segments for the linker so that initializing vars works
                             98 	.area   _INITIALIZER
                     0000    99 s__INITIALIZER = .
                            100 	.area   _INITIALIZED
                     0000   101 s__INITIALIZED = .
                            102 ;
                            103 ; ==================================================================
                            104 ;
                            105 	; Leave space for all of the ABS locations
                            106 	.area	_CODE
   0000                     107 	.ds		_CODE_START
                            108 ;
                            109 ; ==================================================================
                            110 ;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                            111 	.area   _GSINIT
                            112 ; Copy the initialized values to the working area
   0000                     113 gsinit:
   0000 21 00 00      [10]  114 	ld		hl, #s__INITIALIZED
   0003 11 00 00      [10]  115 	ld		de, #s__INITIALIZER
   0006 ED 52         [15]  116 	sbc		hl,de
   0008 23            [ 6]  117 	inc 	hl
   0009 E5            [11]  118 	push	hl
   000A C1            [10]  119 	pop 	bc
                            120 	; Got length of initializer section
   000B 78            [ 4]  121 	ld      a, b
   000C B1            [ 4]  122 	or      a, c
   000D 28 08         [12]  123 	jr      Z, gsinit_next
   000F 11 00 00      [10]  124 	ld      de, #s__INITIALIZED
   0012 21 00 00      [10]  125 	ld      hl, #s__INITIALIZER
   0015 ED B0         [21]  126 	ldir
   0017                     127 gsinit_next:
   0017 C9            [10]  128 	ret
                            129 ;
                            130 ; ==================================================================
                            131 ;
                            132 	.area   _SYSTEM_CODE
                            133 
   0000                     134 BOOTSYS:
   0000 CD 12 00      [17]  135 	call CLRREG
   0003 ED 56         [ 8]  136 	im 1
   0005 CD 00 00      [17]  137 	call gsinit
   0008 0E 10         [ 7]  138 	ld c, #0x10	; Clear the interrupt register
   000A ED 78         [12]  139 	in a,(c)
   000C FB            [ 4]  140 	ei
   000D CD 00 00      [17]  141 	call _main
   0010 18 EE         [12]  142 	jr #BOOTSYS
                            143 
                            144 ; Clear out all the registers so we're not pushing unknown values onto the stack (helps modelsim!)
   0012                     145 CLRREG:
   0012 21 00 00      [10]  146 	ld hl,#0
   0015 11 00 00      [10]  147 	ld de,#0
   0018 01 00 00      [10]  148 	ld bc,#0
   001B C5            [11]  149 	push bc
   001C F1            [10]  150 	pop af
   001D D9            [ 4]  151 	exx
   001E 21 00 00      [10]  152 	ld hl,#0
   0021 11 00 00      [10]  153 	ld de,#0
   0024 01 00 00      [10]  154 	ld bc,#0
   0027 C5            [11]  155 	push bc
   0028 F1            [10]  156 	pop af
   0029 DD 21 00 00   [14]  157 	ld ix,#0
   002D FD 21 00 00   [14]  158 	ld iy,#0
   0031 D9            [ 4]  159 	exx
   0032 C9            [10]  160 	ret
                            161 
                            162 ; This is a native routine to do proper I/O
                            163 ; First parameter is address, second is data
   0033                     164 _OUT:
   0033 F5            [11]  165         push af
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



   0034 C5            [11]  166         push bc
   0035 DD E5         [15]  167         push ix
                            168         ; Add x params plus ret addr to the current stack pointer and we should be looking at the first parameter word
   0037 DD 21 08 00   [14]  169         ld ix,#8        ; Add 5 word parameters plus the call return word
   003B DD 39         [15]  170         add ix,sp
   003D DD 4E 00      [19]  171         ld c,0(ix)      ; Get the port
   0040 DD 46 01      [19]  172         ld b,1(ix)      ; and the data
   0043 ED 41         [12]  173         out (c),b       ; Send the data
   0045 DD E1         [14]  174         pop ix
   0047 C1            [10]  175         pop bc
   0048 F1            [10]  176         pop af
   0049 C9            [10]  177         ret
                            178 
                            179 ; This is a native route to do proper I/O
                            180 ; First parameter is the port, returning data
   004A                     181 _IN:
   004A F5            [11]  182         push af
   004B C5            [11]  183         push bc
   004C DD E5         [15]  184         push ix
                            185 
   004E DD 21 08 00   [14]  186         ld ix, #8
   0052 DD 39         [15]  187         add ix,sp       ; Get parameters off stack
                            188 
   0054 DD 4E 00      [19]  189         ld c,0(ix)      ; Get port #
   0057 06 FF         [ 7]  190         ld b,#0xff
   0059 ED 78         [12]  191         in a,(c)        ; Read the port
   005B 6F            [ 4]  192         ld l,a          ; Returns a single character in l
                            193 
   005C DD E1         [14]  194         pop ix
   005E C1            [10]  195         pop bc
   005F F1            [10]  196         pop af
   0060 C9            [10]  197         ret
                            198 
                            199 ; This is a native route to do proper I/O
                            200 ; First parameter is the port, second is the buffer ptr, third is the count
   0061                     201 _OUTI:
   0061 F5            [11]  202         push af
   0062 C5            [11]  203         push bc
   0063 E5            [11]  204         push hl
   0064 DD E5         [15]  205         push ix
                            206         ; Add x params plus ret addr to the current stack pointer and we should be looking at the first parameter word
   0066 DD 21 0A 00   [14]  207         ld ix,	#10		; Skip over what we've just pushed onto the stack (inc the return address)
   006A DD 39         [15]  208         add ix,sp
   006C DD 4E 00      [19]  209         ld c,0(ix)      ; Get the port
   006F DD 6E 01      [19]  210         ld l,1(ix)      ; and the data addr
   0072 DD 66 02      [19]  211         ld h,2(ix)      ; and the data addr
   0075 DD 46 03      [19]  212         ld b,3(ix)		; and the count
   0078 ED B3         [21]  213         otir			; Send the data
   007A DD E1         [14]  214         pop ix
   007C E1            [10]  215         pop hl
   007D C1            [10]  216         pop bc
   007E F1            [10]  217         pop af
   007F C9            [10]  218         ret
                            219 
                            220 ; This is a native route to do proper I/O
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                            221 ; First parameter is the port, second is the buffer ptr, third is the count
   0080                     222 _INI:
   0080 F5            [11]  223         push af
   0081 C5            [11]  224         push bc
   0082 E5            [11]  225         push hl
   0083 DD E5         [15]  226         push ix
                            227         ; Add x params plus ret addr to the current stack pointer and we should be looking at the first parameter word
   0085 DD 21 0A 00   [14]  228         ld ix,	#10		; Skip over what we've just pushed onto the stack (inc the return address)
   0089 DD 39         [15]  229         add ix,sp
   008B DD 4E 00      [19]  230         ld c,0(ix)      ; Get the port
   008E DD 6E 01      [19]  231         ld l,1(ix)      ; and the data addr
   0091 DD 66 02      [19]  232         ld h,2(ix)      ; and the data addr
   0094 DD 46 03      [19]  233         ld b,3(ix)		; and the count
   0097 ED B2         [21]  234         inir			; Get the data
   0099 DD E1         [14]  235         pop ix
   009B E1            [10]  236         pop hl
   009C C1            [10]  237         pop bc
   009D F1            [10]  238         pop af
   009E C9            [10]  239         ret
                            240 
                            241 ; Native memset routine for performance
   009F                     242 _memset:
   009F F5            [11]  243         push af
   00A0 C5            [11]  244         push bc
   00A1 D5            [11]  245         push de
   00A2 E5            [11]  246         push hl
   00A3 DD E5         [15]  247         push ix
                            248         ; Add x params plus ret addr to the current stack pointer and we should be looking at the first parameter word
   00A5 DD 21 0C 00   [14]  249         ld ix, #12		; Skip over what we've just pushed onto the stack (inc the return address)
   00A9 DD 39         [15]  250         add ix,sp
   00AB DD 5E 00      [19]  251         ld e,0(ix)      ; Get the address
   00AE DD 56 01      [19]  252         ld d,1(ix)
   00B1 DD 6E 00      [19]  253         ld l,0(ix)      ; Get the address again
   00B4 DD 66 01      [19]  254         ld h,1(ix)
   00B7 DD 7E 02      [19]  255         ld a,2(ix)		; Value
   00BA DD 4E 03      [19]  256         ld c,3(ix)		; Count
   00BD DD 46 04      [19]  257         ld b,4(ix)
   00C0 12            [ 7]  258 		ld (de), a		; Set first byte
   00C1 13            [ 6]  259 		inc de
   00C2 0B            [ 6]  260 		dec bc			; Reduce BC by one (we did that byte already)
   00C3 78            [ 4]  261 		ld a,b			; Check it's not zero
   00C4 B1            [ 4]  262 		or c
   00C5 28 28         [12]  263 		jr z, mem_done
   00C7 ED B0         [21]  264 		ldir			; Reset memory
   00C9 18 24         [12]  265 		jr mem_done
                            266 
                            267 ; Native memcpy routine for performance
   00CB                     268 _memcpy:
   00CB F5            [11]  269         push af
   00CC C5            [11]  270         push bc
   00CD D5            [11]  271         push de
   00CE E5            [11]  272         push hl
   00CF DD E5         [15]  273         push ix
                            274         ; Add x params plus ret addr to the current stack pointer and we should be looking at the first parameter word
   00D1 DD 21 0C 00   [14]  275         ld ix, #12		; Skip over what we've just pushed onto the stack (inc the return address)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



   00D5 DD 39         [15]  276         add ix,sp
   00D7 DD 5E 00      [19]  277         ld e,0(ix)      ; Get the destination address
   00DA DD 56 01      [19]  278         ld d,1(ix)
   00DD DD 6E 02      [19]  279         ld l,2(ix)      ; Get the source address
   00E0 DD 66 03      [19]  280         ld h,3(ix)
   00E3 DD 4E 04      [19]  281         ld c,4(ix)		; Count
   00E6 DD 46 05      [19]  282         ld b,5(ix)
   00E9 78            [ 4]  283 		ld a,b			; Check it's not zero
   00EA B1            [ 4]  284 		or c
   00EB 28 02         [12]  285 		jr z, mem_done
   00ED ED B0         [21]  286 		ldir			; Reset memory
                            287 
   00EF                     288 mem_done:
   00EF DD E1         [14]  289         pop ix
   00F1 E1            [10]  290         pop hl
   00F2 D1            [10]  291         pop de
   00F3 C1            [10]  292         pop bc
   00F4 F1            [10]  293         pop af
   00F5 C9            [10]  294         ret
                            295 
                            296 ; Export/Import global functions
                            297 	.globl _main
                            298 	.globl _OUT
                            299 	.globl _OUTI
                            300 	.globl _IN
                            301 	.globl _INI
                            302 	.globl _memset
                            303 	.globl _memcpy
                            304 	.globl _nmi_handler
                            305 	.globl _int_handler
