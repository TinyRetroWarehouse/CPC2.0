                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _init
                             13 	.globl _hdmi_read
                             14 	.globl _hdmi_init
                             15 	.globl _spi_connected
                             16 	.globl _spi_avail
                             17 	.globl _getchar
                             18 	.globl _putchari
                             19 	.globl _stdio_init
                             20 	.globl _ul
                             21 	.globl _console
                             22 	.globl _process_events
                             23 	.globl _globals
                             24 	.globl _puts
                             25 	.globl _sprintf
                             26 ;--------------------------------------------------------
                             27 ; special function registers
                             28 ;--------------------------------------------------------
                             29 ;--------------------------------------------------------
                             30 ; ram data
                             31 ;--------------------------------------------------------
                             32 	.area _DATA
                             33 ;--------------------------------------------------------
                             34 ; ram data
                             35 ;--------------------------------------------------------
                             36 	.area _INITIALIZED
                             37 ;--------------------------------------------------------
                             38 ; absolute external ram data
                             39 ;--------------------------------------------------------
                             40 	.area _DABS (ABS)
                             41 ;--------------------------------------------------------
                             42 ; global & static initialisations
                             43 ;--------------------------------------------------------
                             44 	.area _HOME
                             45 	.area _GSINIT
                             46 	.area _GSFINAL
                             47 	.area _GSINIT
                             48 ;--------------------------------------------------------
                             49 ; Home
                             50 ;--------------------------------------------------------
                             51 	.area _HOME
                             52 	.area _HOME
                             53 ;--------------------------------------------------------
                             54 ; code
                             55 ;--------------------------------------------------------
                             56 	.area _CODE
                     0000    57 	G$init$0$0	= .
                             58 	.globl	G$init$0$0
                     0000    59 	C$main.c$31$0$0	= .
                             60 	.globl	C$main.c$31$0$0
                             61 ;../src/main.c:31: void init()
                             62 ;	---------------------------------
                             63 ; Function init
                             64 ; ---------------------------------
   0000                      65 _init::
                     0000    66 	C$main.c$34$1$82	= .
                             67 	.globl	C$main.c$34$1$82
                             68 ;../src/main.c:34: memset( globals(), 0, sizeof( struct global_vars ) );
   0000 CDr00r00      [17]   69 	call	_globals
   0003 36 00         [10]   70 	ld	(hl), #0x00
   0005 5D            [ 4]   71 	ld	e, l
   0006 54            [ 4]   72 	ld	d, h
   0007 13            [ 6]   73 	inc	de
   0008 01 22 04      [10]   74 	ld	bc, #0x0422
   000B ED B0         [21]   75 	ldir
                     000D    76 	C$main.c$37$1$82	= .
                             77 	.globl	C$main.c$37$1$82
                             78 ;../src/main.c:37: stdio_init();
   000D CDr00r00      [17]   79 	call	_stdio_init
                     0010    80 	C$main.c$40$1$82	= .
                             81 	.globl	C$main.c$40$1$82
                             82 ;../src/main.c:40: hdmi_init();
                     0010    83 	C$main.c$42$1$82	= .
                             84 	.globl	C$main.c$42$1$82
                     0010    85 	XG$init$0$0	= .
                             86 	.globl	XG$init$0$0
   0010 C3r00r00      [10]   87 	jp  _hdmi_init
                     0013    88 	G$main$0$0	= .
                             89 	.globl	G$main$0$0
                     0013    90 	C$main.c$45$1$82	= .
                             91 	.globl	C$main.c$45$1$82
                             92 ;../src/main.c:45: void main(void)
                             93 ;	---------------------------------
                             94 ; Function main
                             95 ; ---------------------------------
   0013                      96 _main::
   0013 DD E5         [15]   97 	push	ix
   0015 21 B0 FF      [10]   98 	ld	hl,#-80
   0018 39            [11]   99 	add	hl,sp
   0019 F9            [ 6]  100 	ld	sp,hl
                     001A   101 	C$main.c$50$1$84	= .
                            102 	.globl	C$main.c$50$1$84
                            103 ;../src/main.c:50: init();
   001A CDr00r00      [17]  104 	call	_init
                     001D   105 	C$main.c$54$1$84	= .
                            106 	.globl	C$main.c$54$1$84
                            107 ;../src/main.c:54: while(!spi_connected()) process_events();
   001D                     108 00101$:
   001D CDr00r00      [17]  109 	call	_spi_connected
   0020 7D            [ 4]  110 	ld	a,l
   0021 B7            [ 4]  111 	or	a, a
   0022 20 05         [12]  112 	jr	NZ,00103$
   0024 CDr00r00      [17]  113 	call	_process_events
   0027 18 F4         [12]  114 	jr	00101$
   0029                     115 00103$:
                     0029   116 	C$main.c$57$1$84	= .
                            117 	.globl	C$main.c$57$1$84
                            118 ;../src/main.c:57: puts("\033[2J\033[HCPC2.0 Boot Log - Supervisor OS, build " __VERSION__); ul();
   0029 21r8Er00      [10]  119 	ld	hl,#___str_0
   002C E5            [11]  120 	push	hl
   002D CDr00r00      [17]  121 	call	_puts
   0030 F1            [10]  122 	pop	af
   0031 CDr00r00      [17]  123 	call	_ul
                     0034   124 	C$main.c$60$1$84	= .
                            125 	.globl	C$main.c$60$1$84
                            126 ;../src/main.c:60: sprintf(buffer, "HDMI chip ID : 0x%02x%02x", hdmi_read( 0xf5 ), hdmi_read( 0xf6 ));
   0034 3E F6         [ 7]  127 	ld	a,#0xf6
   0036 F5            [11]  128 	push	af
   0037 33            [ 6]  129 	inc	sp
   0038 CDr00r00      [17]  130 	call	_hdmi_read
   003B 33            [ 6]  131 	inc	sp
   003C 5D            [ 4]  132 	ld	e,l
   003D 16 00         [ 7]  133 	ld	d,#0x00
   003F D5            [11]  134 	push	de
   0040 3E F5         [ 7]  135 	ld	a,#0xf5
   0042 F5            [11]  136 	push	af
   0043 33            [ 6]  137 	inc	sp
   0044 CDr00r00      [17]  138 	call	_hdmi_read
   0047 33            [ 6]  139 	inc	sp
   0048 4D            [ 4]  140 	ld	c,l
   0049 D1            [10]  141 	pop	de
   004A 06 00         [ 7]  142 	ld	b,#0x00
   004C 21 00 00      [10]  143 	ld	hl,#0x0000
   004F 39            [11]  144 	add	hl,sp
   0050 E5            [11]  145 	push	hl
   0051 FD E1         [14]  146 	pop	iy
   0053 E5            [11]  147 	push	hl
   0054 D5            [11]  148 	push	de
   0055 C5            [11]  149 	push	bc
   0056 01rC2r00      [10]  150 	ld	bc,#___str_1
   0059 C5            [11]  151 	push	bc
   005A FD E5         [15]  152 	push	iy
   005C CDr00r00      [17]  153 	call	_sprintf
   005F 21 08 00      [10]  154 	ld	hl,#8
   0062 39            [11]  155 	add	hl,sp
   0063 F9            [ 6]  156 	ld	sp,hl
   0064 CDr00r00      [17]  157 	call	_console
                     0067   158 	C$main.c$63$1$84	= .
                            159 	.globl	C$main.c$63$1$84
                            160 ;../src/main.c:63: puts("Echoing back");
   0067 21rDCr00      [10]  161 	ld	hl, #___str_2
   006A E3            [19]  162 	ex	(sp),hl
   006B CDr00r00      [17]  163 	call	_puts
                     006E   164 	C$main.c$64$1$84	= .
                            165 	.globl	C$main.c$64$1$84
                            166 ;../src/main.c:64: putchari('>');
   006E 26 3E         [ 7]  167 	ld	h,#0x3e
   0070 E3            [19]  168 	ex	(sp),hl
   0071 33            [ 6]  169 	inc	sp
   0072 CDr00r00      [17]  170 	call	_putchari
   0075 33            [ 6]  171 	inc	sp
                     0076   172 	C$main.c$69$2$85	= .
                            173 	.globl	C$main.c$69$2$85
                            174 ;../src/main.c:69: while(spi_avail() == 0) process_events();
   0076                     175 00104$:
   0076 CDr00r00      [17]  176 	call	_spi_avail
   0079 7D            [ 4]  177 	ld	a,l
   007A B7            [ 4]  178 	or	a, a
   007B 20 05         [12]  179 	jr	NZ,00106$
   007D CDr00r00      [17]  180 	call	_process_events
   0080 18 F4         [12]  181 	jr	00104$
   0082                     182 00106$:
                     0082   183 	C$main.c$70$2$85	= .
                            184 	.globl	C$main.c$70$2$85
                            185 ;../src/main.c:70: putchari( getchar() );
   0082 CDr00r00      [17]  186 	call	_getchar
   0085 45            [ 4]  187 	ld	b,l
   0086 C5            [11]  188 	push	bc
   0087 33            [ 6]  189 	inc	sp
   0088 CDr00r00      [17]  190 	call	_putchari
   008B 33            [ 6]  191 	inc	sp
                     008C   192 	C$main.c$73$1$84	= .
                            193 	.globl	C$main.c$73$1$84
                     008C   194 	XG$main$0$0	= .
                            195 	.globl	XG$main$0$0
   008C 18 E8         [12]  196 	jr	00104$
                     008E   197 Fmain$__str_0$0$0 == .
   008E                     198 ___str_0:
   008E 1B                  199 	.db 0x1b
   008F 5B 32 4A            200 	.ascii "[2J"
   0092 1B                  201 	.db 0x1b
   0093 5B 48 43 50 43 32   202 	.ascii "[HCPC2.0 Boot Log - Supervisor OS, build #1181"
        2E 30 20 42 6F 6F
        74 20 4C 6F 67 20
        2D 20 53 75 70 65
        72 76 69 73 6F 72
        20 4F 53 2C 20 62
        75 69 6C 64 20 23
        31 31 38 31
   00C1 00                  203 	.db 0x00
                     00C2   204 Fmain$__str_1$0$0 == .
   00C2                     205 ___str_1:
   00C2 48 44 4D 49 20 63   206 	.ascii "HDMI chip ID : 0x%02x%02x"
        68 69 70 20 49 44
        20 3A 20 30 78 25
        30 32 78 25 30 32
        78
   00DB 00                  207 	.db 0x00
                     00DC   208 Fmain$__str_2$0$0 == .
   00DC                     209 ___str_2:
   00DC 45 63 68 6F 69 6E   210 	.ascii "Echoing back"
        67 20 62 61 63 6B
   00E8 00                  211 	.db 0x00
                            212 	.area _CODE
                            213 	.area _INITIALIZER
                            214 	.area _CABS (ABS)
