                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module interrupt
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _int_handler
                             12 	.globl _nmi_handler
                             13 	.globl _spiSetProcessed
                             14 	.globl _spiSetInUse
                             15 	.globl _spiGetInUse
                             16 	.globl _IN
                             17 ;--------------------------------------------------------
                             18 ; special function registers
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; ram data
                             22 ;--------------------------------------------------------
                             23 	.area _DATA
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area _INITIALIZED
                             28 ;--------------------------------------------------------
                             29 ; absolute external ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DABS (ABS)
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _HOME
                             36 	.area _GSINIT
                             37 	.area _GSFINAL
                             38 	.area _GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _HOME
                             43 	.area _HOME
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area _CODE
                     0000    48 	G$nmi_handler$0$0	= .
                             49 	.globl	G$nmi_handler$0$0
                     0000    50 	C$interrupt.c$27$0$0	= .
                             51 	.globl	C$interrupt.c$27$0$0
                             52 ;../src/interrupt.c:27: void nmi_handler(void)
                             53 ;	---------------------------------
                             54 ; Function nmi_handler
                             55 ; ---------------------------------
   0000                      56 _nmi_handler::
                     0000    57 	C$interrupt.c$30$0$0	= .
                             58 	.globl	C$interrupt.c$30$0$0
                             59 ;../src/interrupt.c:30: }
                     0000    60 	C$interrupt.c$30$0$0	= .
                             61 	.globl	C$interrupt.c$30$0$0
                     0000    62 	XG$nmi_handler$0$0	= .
                             63 	.globl	XG$nmi_handler$0$0
   0000 C9            [10]   64 	ret
                     0001    65 	G$int_handler$0$0	= .
                             66 	.globl	G$int_handler$0$0
                     0001    67 	C$interrupt.c$35$0$0	= .
                             68 	.globl	C$interrupt.c$35$0$0
                             69 ;../src/interrupt.c:35: void int_handler(void)
                             70 ;	---------------------------------
                             71 ; Function int_handler
                             72 ; ---------------------------------
   0001                      73 _int_handler::
                     0001    74 	C$interrupt.c$37$1$50	= .
                             75 	.globl	C$interrupt.c$37$1$50
                             76 ;../src/interrupt.c:37: unsigned char int_src = IN(INTERRUPT_CONTROLLER_BASE);
   0001 3E 10         [ 7]   77 	ld	a,#0x10
   0003 F5            [11]   78 	push	af
   0004 33            [ 6]   79 	inc	sp
   0005 CDr00r00      [17]   80 	call	_IN
   0008 33            [ 6]   81 	inc	sp
                     0009    82 	C$interrupt.c$40$1$50	= .
                             83 	.globl	C$interrupt.c$40$1$50
                             84 ;../src/interrupt.c:40: if( int_src & INT_SPI )
   0009 CB 45         [ 8]   85 	bit	0, l
   000B C8            [11]   86 	ret	Z
                     000C    87 	C$spi.h$86$5$55	= .
                             88 	.globl	C$spi.h$86$5$55
                             89 ;../include/spi.h:86: return IN(SPI_SR) & OUT_EMPTY ? 1 : 0;
   000C 3E 01         [ 7]   90 	ld	a,#0x01
   000E F5            [11]   91 	push	af
   000F 33            [ 6]   92 	inc	sp
   0010 CDr00r00      [17]   93 	call	_IN
   0013 33            [ 6]   94 	inc	sp
   0014 CB 55         [ 8]   95 	bit	2, l
   0016 C8            [11]   96 	ret	Z
                     0017    97 	C$interrupt.c$45$2$51	= .
                             98 	.globl	C$interrupt.c$45$2$51
                             99 ;../src/interrupt.c:45: if( spiEmptyOut() && spiGetInUse() )
   0017 CDr00r00      [17]  100 	call	_spiGetInUse
   001A 7D            [ 4]  101 	ld	a,l
   001B B7            [ 4]  102 	or	a, a
   001C C8            [11]  103 	ret	Z
                     001D   104 	C$interrupt.c$48$3$52	= .
                            105 	.globl	C$interrupt.c$48$3$52
                            106 ;../src/interrupt.c:48: spiSetInUse( false );
   001D AF            [ 4]  107 	xor	a, a
   001E F5            [11]  108 	push	af
   001F 33            [ 6]  109 	inc	sp
   0020 CDr00r00      [17]  110 	call	_spiSetInUse
   0023 33            [ 6]  111 	inc	sp
                     0024   112 	C$interrupt.c$49$3$52	= .
                            113 	.globl	C$interrupt.c$49$3$52
                            114 ;../src/interrupt.c:49: spiSetProcessed( false );
   0024 AF            [ 4]  115 	xor	a, a
   0025 F5            [11]  116 	push	af
   0026 33            [ 6]  117 	inc	sp
   0027 CDr00r00      [17]  118 	call	_spiSetProcessed
   002A 33            [ 6]  119 	inc	sp
                     002B   120 	C$interrupt.c$52$1$50	= .
                            121 	.globl	C$interrupt.c$52$1$50
                     002B   122 	XG$int_handler$0$0	= .
                            123 	.globl	XG$int_handler$0$0
   002B C9            [10]  124 	ret
                            125 	.area _CODE
                            126 	.area _INITIALIZER
                            127 	.area _CABS (ABS)
