`default_nettype wire

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module CPC2_DE10(

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// HDMI //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		          		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		          		HDMI_TX_DE,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// GPIO_0, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1,
	// UART
	inout 		          		HPS_UART_RX,
	inout		          			HPS_UART_TX,
	/*
	// SDCARD
	inout			          		HPS_SD_CLKIN,
	inout			          		HPS_SD_CLK,
	inout			          		HPS_SD_CMD,
	inout			     [3:0]		HPS_SD_DATA,
	*/
	// USB
	inout								HPS_USB_RESET,
	inout								HPS_USB_CLKOUT,
	inout								HPS_USB_DIR,
	inout								HPS_USB_NXT,
	inout								HPS_USB_STP,
	inout					[7:0]		HPS_USB_DATA,
	
	// DDR3
	output		    [14:0]		HPS_DDR3_ADDR,
	output		     [2:0]		HPS_DDR3_BA,
	output		          		HPS_DDR3_CAS_N,
	output		          		HPS_DDR3_CKE,
	output		          		HPS_DDR3_CK_N,
	output		          		HPS_DDR3_CK_P,
	output		          		HPS_DDR3_CS_N,
	output		     [3:0]		HPS_DDR3_DM,
	inout 		    [31:0]		HPS_DDR3_DQ,
	inout 		     [3:0]		HPS_DDR3_DQS_N,
	inout 		     [3:0]		HPS_DDR3_DQS_P,
	output		          		HPS_DDR3_ODT,
	output		          		HPS_DDR3_RAS_N,
	output		          		HPS_DDR3_RESET_N,
	input 		          		HPS_DDR3_RZQ,
	output		          		HPS_DDR3_WE_N	
);

//=======================================================
//  REG/WIRE declarations
//=======================================================

	// HPS
	wire [66:0] loan_in, loan_out, loan_oe;
	// MMC
	wire mmccmd_oe, mmcdata_oe, usb_oe;
	// GPIO
	wire [31:0] gpio;

	HPS u0 (
		.memory_mem_a                     (HPS_DDR3_ADDR),                     // memory.mem_a
		.memory_mem_ba                    (HPS_DDR3_BA),                    //       .mem_ba
		.memory_mem_ck                    (HPS_DDR3_CK_P),                    //       .mem_ck
		.memory_mem_ck_n                  (HPS_DDR3_CK_N),                  //       .mem_ck_n
		.memory_mem_cke                   (HPS_DDR3_CKE),                   //       .mem_cke
		.memory_mem_cs_n                  (HPS_DDR3_CS_N),                  //       .mem_cs_n
		.memory_mem_ras_n                 (HPS_DDR3_RAS_N),                 //       .mem_ras_n
		.memory_mem_cas_n                 (HPS_DDR3_CAS_N),                 //       .mem_cas_n
		.memory_mem_we_n                  (HPS_DDR3_WE_N),                  //       .mem_we_n
		.memory_mem_reset_n               (HPS_DDR3_RESET_N),               //       .mem_reset_n
		.memory_mem_dq                    (HPS_DDR3_DQ),                    //       .mem_dq
		.memory_mem_dqs                   (HPS_DDR3_DQS_P),                   //       .mem_dqs
		.memory_mem_dqs_n                 (HPS_DDR3_DQS_N),                 //       .mem_dqs_n
		.memory_mem_odt                   (HPS_DDR3_ODT),                   //       .mem_odt
		.memory_mem_dm                    (HPS_DDR3_DM),                    //       .mem_dm
		.memory_oct_rzqin                 (HPS_DDR3_RZQ),                 //       .oct_rzqin
		// Uart
		.hps_io_hps_io_gpio_inst_LOANIO49 (HPS_UART_RX),
		.hps_io_hps_io_gpio_inst_LOANIO50 (HPS_UART_TX),
		/*
		// SDCARD
		.hps_io_hps_io_gpio_inst_LOANIO36 (HPS_SD_CMD), 						// hps_io.hps_io_gpio_inst_LOANIO36
		.hps_io_hps_io_gpio_inst_LOANIO38 (HPS_SD_DATA[0]), 					//       .hps_io_gpio_inst_LOANIO38
		.hps_io_hps_io_gpio_inst_LOANIO39 (HPS_SD_DATA[1]), 					//       .hps_io_gpio_inst_LOANIO39
		.hps_io_hps_io_gpio_inst_LOANIO44 (HPS_SD_CLKIN), 						//       .hps_io_gpio_inst_LOANIO45
		.hps_io_hps_io_gpio_inst_LOANIO45 (HPS_SD_CLK), 						//       .hps_io_gpio_inst_LOANIO45
		.hps_io_hps_io_gpio_inst_LOANIO46 (HPS_SD_DATA[2]), 					//       .hps_io_gpio_inst_LOANIO46
		.hps_io_hps_io_gpio_inst_LOANIO47 (HPS_SD_DATA[3]), 					//       .hps_io_gpio_inst_LOANIO47
		*/
		// USB
		.hps_io_hps_io_gpio_inst_LOANIO01 (HPS_USB_DATA[0]),
		.hps_io_hps_io_gpio_inst_LOANIO02 (HPS_USB_DATA[1]),
		.hps_io_hps_io_gpio_inst_LOANIO03 (HPS_USB_DATA[2]),
		.hps_io_hps_io_gpio_inst_LOANIO04 (HPS_USB_DATA[3]),
		.hps_io_hps_io_gpio_inst_LOANIO05 (HPS_USB_DATA[4]),
		.hps_io_hps_io_gpio_inst_LOANIO06 (HPS_USB_DATA[5]),
		.hps_io_hps_io_gpio_inst_LOANIO07 (HPS_USB_DATA[6]),
		.hps_io_hps_io_gpio_inst_LOANIO08 (HPS_USB_DATA[7]),
		.hps_io_hps_io_gpio_inst_LOANIO10 (HPS_USB_CLKOUT),
		.hps_io_hps_io_gpio_inst_LOANIO11 (HPS_USB_STP),
		.hps_io_hps_io_gpio_inst_LOANIO12 (HPS_USB_DIR),
		.hps_io_hps_io_gpio_inst_LOANIO13 (HPS_USB_NXT),
		.hps_io_hps_io_gpio_inst_LOANIO42 (HPS_USB_RESET),
		// LoanIO
		.loanio_in                        (loan_in),                        // loanio.in
		.loanio_out                       (loan_out),                       //       .out
		.loanio_oe                        (loan_oe),                        //       .oe
		.hps_gp_gp_in(),                    // hps_gp.gp_in
		.hps_gp_gp_out(gpio)               	//       .gp_out
		
	);

// =========== Assign loanIO directions ===========
// UART_TX
assign loan_oe[50] = 1'b1;
// USB Clk
assign loan_oe[10] = 1'b0;
// USB Reset
assign loan_oe[42] = 1'b1;
// USB NXT/DIRections
assign loan_oe[13] = 1'b0;
assign loan_oe[12] = 1'b0;
// USB STP
assign loan_oe[11] = 1'b1;
// USB Data
assign loan_oe[8:1] = {8{usb_oe}};

//=======================================================
//  Structural coding
//=======================================================

wire [2:0] dummy1;

assign LED[6:1] = 7'd0;
assign LED[7] = gpio[0];

wire mmc_cmd, mmc_clkinv;
wire [3:0] mmc_data;
assign GPIO_0[4] = (mmccmd_oe) ? mmc_cmd : 1'bz;
assign GPIO_0[3:0] = (mmcdata_oe) ? mmc_data : 4'bzzzz;
assign GPIO_0[5] = ~mmc_clkinv;

assign GPIO_0[13] = mmccmd_oe;
assign GPIO_0[11] = GPIO_0[5];
assign GPIO_0[9] = GPIO_0[4];

CPC2 cpc2_inst (
		.CLK_50(FPGA_CLK1_50),
		.CLK2_50(FPGA_CLK2_50),
		.CLK_12(FPGA_CLK3_50),
		// Soft Reset - any key
		.reset_i((KEY != 2'b11)|gpio[0]),
		// I2C Control Ports
		.I2C_SCL(HDMI_I2C_SCL),						// INOUT - HDMI
		.I2C_SDA(HDMI_I2C_SDA),						// INOUT - HDMI
		// Disk/activity LED
		.LED(GPIO_1[19]),
		// Video port - output
		.VSYNC(HDMI_TX_VS),
		.HSYNC(HDMI_TX_HS),
		.VDE(HDMI_TX_DE),
		.VCLK(HDMI_TX_CLK),
		.R(HDMI_TX_D[23:16]),
		.G(HDMI_TX_D[15:8]),
		.B(HDMI_TX_D[7:0]),
		// Video Audio
		.I2S({dummy1,HDMI_I2S}),	// 4 bits
		.ASCLK(HDMI_SCLK),
		.LRCLK(HDMI_LRCLK),
		.MCLK(HDMI_MCLK),
		// Uart port
		.uart_rx_i(loan_in[49]),
		.uart_tx_o(loan_out[50]),
		// SDCARD
		.mmcclk_o(mmc_clkinv),
		.mmccmd_i(GPIO_0[4]),
		.mmccmd_o(mmc_cmd),
		.mmccmd_oe(mmccmd_oe),
		.mmcdata_i(GPIO_0[3:0]),
		.mmcdata_o(mmc_data),
		.mmcdata_oe(mmcdata_oe),
		// Hyperram1 Port
		.hyper_dq({GPIO_1[10], GPIO_1[13], GPIO_1[15], GPIO_1[18], GPIO_1[17], GPIO_1[16], GPIO_1[12], GPIO_1[14]}),
		.hyper_rwds(GPIO_1[7]),
		.hyper_csn_o(GPIO_1[8]),
		.hyper_ck_o(GPIO_1[11] ),
		.hyper_resetn_o(GPIO_1[9] ),
		// Hyperram2 Port
		.hyper2_dq({GPIO_1[28], GPIO_1[30], GPIO_1[32], GPIO_1[35], GPIO_1[34], GPIO_1[33], GPIO_1[29], GPIO_1[31]}),
		.hyper2_rwds(GPIO_1[26]),
		.hyper2_csn_o(GPIO_1[25]),
		.hyper2_ck_o(GPIO_1[27] ),
		.hyper2_resetn_o(GPIO_1[24] ),
		// USB port
		.usb_clkin(loan_in[10]),
		.usb_data_i({loan_in[8],loan_in[7],loan_in[6],loan_in[5],loan_in[4],loan_in[3],loan_in[2],loan_in[1]}),
		.usb_data_o({loan_out[8],loan_out[7],loan_out[6],loan_out[5],loan_out[4],loan_out[3],loan_out[2],loan_out[1]}),
		.usb_data_oe(usb_oe),
		.usb_dir(loan_in[12]),
		.usb_nxt(loan_in[13]),
		.usb_stp(loan_out[11]),
		.usb_reset(loan_out[42])
		);
		
		// TODO: Remove DE10 test code
		reg [25:0] testled = 0;
		always @(posedge FPGA_CLK3_50) testled <= testled + 1'b1;
		assign LED[0] = testled<25'd2000000;

endmodule
